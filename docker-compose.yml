services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: loctelli_db
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_DB: ${POSTGRES_DB:-loctelli}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./project/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-loctelli}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - loctelli-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: loctelli_redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redisdata:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 60s
      timeout: 3s
      retries: 5
    networks:
      - loctelli-network

  # Backend API
  api:
    build:
      context: ./project
      dockerfile: Dockerfile
    container_name: loctelli_api
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: 8000
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-password}@db:5432/${POSTGRES_DB:-loctelli}
      REDIS_URL: redis://redis:6379
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-in-production}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET:-your-super-secret-refresh-key-change-in-production}
      DEFAULT_ADMIN_PASSWORD: "defaultAdmin123!CANTUNA"
    env_file:
      - ./project/.env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes: []
    networks:
      - loctelli-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/status/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Main Frontend (CRM)
  frontend:
    build:
      context: ./my-app
      dockerfile: Dockerfile
    container_name: loctelli_frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:3000/api/proxy}
      BACKEND_URL: http://loctelli_api:8000
    env_file:
      - ./my-app/.env
    depends_on:
      api:
        condition: service_healthy
    networks:
      - loctelli-network

  # # Website Builder Frontend
  # website-builder:
  #   build:
  #     context: ./website-builder
  #     dockerfile: Dockerfile
  #   container_name: loctelli_website_builder
  #   restart: unless-stopped
  #   ports:
  #     - "3001:3000"
  #   environment:
  #     NODE_ENV: ${NODE_ENV:-development}
  #     NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:3001/api/proxy}
  #     BACKEND_URL: http://loctelli_api:8000
  #   env_file:
  #     - ./website-builder/.env
  #   depends_on:
  #     api:
  #       condition: service_healthy
  #   networks:
  #     - loctelli-network

volumes:
  pgdata:
    driver: local
  redisdata:
    driver: local

networks:
  loctelli-network:
    driver: bridge 